# coding: utf-8

# Começando com os imports
import csv
import matplotlib.pyplot as plt

# Vamos ler os dados como uma lista
print("Lendo o documento...")
with open("chicago.csv", "r") as file_read:
# Return a reader object which will iterate over lines in the given csvfile
    reader = csv.reader(file_read) 
# list() Convert an iterable (tuple, string, set, dic) to a list	
    data_list = list(reader) 
print("Ok!")

# Vamos verificar quantas linhas nós temos
print("Número de linhas:")
print(len(data_list))

# Imprimindo a primeira linha de data_list para verificar se funcionou.
print("Linha 0: ")
print(data_list[0])
# É o cabeçalho dos dados, para que possamos identificar as colunas.

# Imprimindo a segunda linha de data_list, ela deveria conter alguns dados
print("Linha 1: ")
print(data_list[1])

input("Aperte Enter para continuar...")
# TAREFA 1
# TODO: Imprima as primeiras 20 linhas usando um loop para identificar os dados.
print("\n\nTAREFA 1: Imprimindo as primeiras 20 amostras")

#testes de aprendizado:
#print(data_list[0:21])
#print(len(data_list[21]))
#print(list(range(21)))

for line in data_list[:20]:
	print(line)  

# Vamos mudar o data_list para remover o cabeçalho dele.
data_list = data_list[1:]

# Nós podemos acessar as features pelo índice
# Por exemplo: sample[6] para imprimir gênero, ou sample[-2]

input("Aperte Enter para continuar...")
# TAREFA 2
# TODO: Imprima o `gênero` das primeiras 20 linhas

print("\nTAREFA 2: Imprimindo o gênero das primeiras 20 amostras")
# Ótimo! Nós podemos pegar as linhas(samples) iterando com um for, e as colunas(features) por índices.
# Mas ainda é difícil pegar uma coluna em uma lista. Exemplo: Lista com todos os gêneros

for line in data_list[:20]:
	print(line[6]) 	#aprendizado: entende como input de função entre (), por isso usar []
	
input("Aperte Enter para continuar...")
# TAREFA 3
# TODO: Crie uma função para adicionar as colunas(features) de uma lista em outra lista, na mesma ordem

def column_to_list(data, index): #inputs dentro da função
	column_list = []
    # Dica: Você pode usar um for para iterar sobre as amostras, pegar a feature pelo seu índice, e dar append para uma lista
	for line in data_list:
		column_list.append(line[index])
	return column_list
			
#Função column_to_list 
#Argumentos: data, index
#Retorna: colunas de uma lista x em outra list y de forma ordenada

# Vamos checar com os gêneros se isso está funcionando (apenas para os primeiros 20)
print("\nTAREFA 3: Imprimindo a lista de gêneros das primeiras 20 amostras")
print(column_to_list(data_list, -2)[:20])

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert type(column_to_list(data_list, -2)) is list, "TAREFA 3: Tipo incorreto retornado. Deveria ser uma lista."
assert len(column_to_list(data_list, -2)) == 1551505, "TAREFA 3: Tamanho incorreto retornado."
assert column_to_list(data_list, -2)[0] == "" and column_to_list(data_list, -2)[1] == "Male", "TAREFA 3: A lista não coincide."
# -----------------------------------------------------

input("Aperte Enter para continuar...")
# Agora sabemos como acessar as features, vamos contar quantos Male (Masculinos) e Female (Femininos) o dataset tem
# TAREFA 4
# TODO: Conte cada gênero. Você não deveria usar uma função parTODO isso.
# declarando 2 variáveis para realizar o somatório (male e female)
male = 0
female = 0

for line in data_list:
	if line[6] == 'Male':
		male +=1
	elif line[6] == 'Female':
		female +=1
#print(male)
#print(female)
	

# Verificando o resultado
print("\nTAREFA 4: Imprimindo quantos masculinos e femininos nós encontramos")
print("Masculinos: ", male, "\nFemininos: ", female)

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert male == 935854 and female == 298784, "TAREFA 4: A conta não bate."
# -----------------------------------------------------

input("Aperte Enter para continuar...")
# Por que nós não criamos uma função parTODO isso?
# TAREFA 5
# TODO: Crie uma função para contar os gêneros. Retorne uma lista.
# Isso deveria retornar uma lista com [count_male, count_female] (exemplo: [10, 15] significa 10 Masculinos, 15 Femininos)

#os argumentos da função são valores que são passadas como entradas quando a função é chamada
#print fornece saída para o console e return fornece valor com o qual vc pode armazenar, trabalhar e codificar + tarde.

#Função count_gender
#Argumentos: lista 'data_list' com os valores da coluna gênero
#Retorna: lista com a contagem dos valores por gênero
def count_gender(data_list): 
	male = 0
	female = 0

	for line in data_list:
		if line[6] == 'Male':
			male += 1
		elif line[6] == 'Female':
			female += 1
	return [male, female]

print("\nTAREFA 5: Imprimindo o resultado de count_gender")
print(count_gender(data_list))

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert type(count_gender(data_list)) is list, "TAREFA 5: Tipo incorreto retornado. Deveria retornar uma lista."
assert len(count_gender(data_list)) == 2, "TAREFA 5: Tamanho incorreto retornado."
assert count_gender(data_list)[0] == 935854 and count_gender(data_list)[1] == 298784, "TAREFA 5: Resultado incorreto no retorno!"
# -----------------------------------------------------

input("Aperte Enter para continuar...")
# Agora que nós podemos contar os usuários, qual gênero é mais prevalente?
# TAREFA 6
# TODO: Crie uma função que pegue o gênero mais popular, e retorne este gênero como uma string.
# Esperamos ver "Masculino", "Feminino", ou "Igual" como resposta.

#Função most_popular_gender
#Argumentos: lista 'data_list' com os valores da coluna gênero
#Retorna: comparativo com o gênero mais popular da lista
def most_popular_gender(data_list):
	answer = ""
	#utilizando valores de male e female da função count_gender
	if(male > female):              
		answer = 'Masculino'
	elif(female > male):
		answer = 'Feminino'
	else:
		answer = 'Igual'
	return answer 
	
print("\nTAREFA 6: Qual é o gênero mais popular na lista?")
print("O gênero mais popular na lista é: ", most_popular_gender(data_list))

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert type(most_popular_gender(data_list)) is str, "TAREFA 6: Tipo incorreto no retorno. Deveria retornar uma string."
assert most_popular_gender(data_list) == "Masculino", "TAREFA 6: Resultado de retorno incorreto!"
# -----------------------------------------------------

# Se tudo está rodando como esperado, verifique este gráfico!
gender_list = column_to_list(data_list, -2)
types = ["Male", "Female"]
quantity = count_gender(data_list)
y_pos = list(range(len(types)))
plt.bar(y_pos, quantity)
plt.ylabel('Quantidade')
plt.xlabel('Gênero')
plt.xticks(y_pos, types)
plt.title('Quantidade por Gênero')
plt.show(block=True)

input("Aperte Enter para continuar...")
# TAREFA 7
# TODO: Crie um gráfico similar para user_types. Tenha certeza que a legenda está correta.
print("\nTAREFA 7: Verifique o gráfico!")

print("\nVerificando o tipo de User Type")
for i in data_list[:20]:
	print (i[-3])

#Função most_popular_usertype
#Argumentos: lista 'data_list' com os valores da coluna User Type
#Retorna: número consolidado por tipo de Usuário 	
def most_popular_usertype(data_list):
	subscriber = 0
	customer = 0
	
	for line in data_list:
		if line[-3] == 'Subscriber':
			subscriber += 1
		elif line[-3] == 'Customer':
			customer += 1
	return [subscriber, customer]
	
print("\nTAREFA 7: Quais são os números de user type? ")
print("Subscriber e Customer, respectivamente:", most_popular_usertype(data_list))

#plotando o gráfico 7:
user_type = column_to_list(data_list, -3)
types = ["Subscriber", "Customer"]
quantity = most_popular_usertype(data_list)
y_pos = list(range(len(types)))
plt.bar(y_pos, quantity)
plt.ylabel('Quantidade')
plt.xlabel('User Type')
plt.xticks(y_pos, types)
plt.title('Quantidade por User Type')
plt.show(block=True)
	
input("Aperte Enter para continuar...")
# TAREFA 8
# TODO: Responda a seguinte questão
male, female = count_gender(data_list)
print("\nTAREFA 8: Por que a condição a seguir é Falsa?")
print("male + female == len(data_list):", male + female == len(data_list))
answer = "Porque possuímos valores nulos na coluna dos gêneros Male e Female. Dessa forma, o número não é igual comparado ao tamanho do número de linhas" 

print("resposta:", answer)

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert answer != "Escreva sua resposta aqui.", "TAREFA 8: Escreva sua própria resposta!"
# -----------------------------------------------------

input("\nAperte Enter para continuar...")
# Vamos trabalhar com trip_duration (duração da viagem) agora. Não conseguimos tirar alguns valores dele.
# TAREFA 9
# TODO: Ache a duração de viagem Mínima, Máxima, Média, e Mediana.
# Você não deve usar funções prontas parTODO isso, como max() e min().
trip_duration_list = column_to_list(data_list, 2)
min_trip = 0.
max_trip = 0.
mean_trip = 0.
median_trip = 0.

print("\nPrimeira linha da trip_duration_list:", trip_duration_list[0])
print("Quantidade de viagens:", len(trip_duration_list))
trip_quantity = (len(trip_duration_list))

#calculando a média:
for mean in trip_duration_list:
	mean_trip += int(mean)
print("\nSoma acumulada para fazer média aritmética depois:", int(mean_trip))	
print("\nMédia Aritmética:") 
mean_trip = round(mean_trip/(trip_quantity),0)
print(mean_trip)

#convertendo a lista string em int para ordenar
trip_list_new = []
for trip in trip_duration_list:
	trip_list_new.append(int(trip))
	
print("\nPrintando as primeiras linhas da lista normal:", trip_list_new[:20])
trip_list_new.sort()
print("Testando para verificar como ficou a ordenação após list.sort() :",trip_list_new[:20])

#OK. A lista está pronta para calcular o máx, min e mediana
for i in trip_list_new:
	if(i) >  max_trip: 
		max_trip = i
min_trip = trip_list_new[0]		
print("\nDuração de viagem MÍNIMA:", min_trip) 
print("Duração de viagem MÁXIMA:", max_trip)

#calculando a mediana e verificando se tem qtde ímpar ou par de elementos:
#a mediana é o valor na posição (n+1)/2 caso n seja ímpar e a média entre os valores em (n/2 + ((n/2)+1)) caso n seja par.
print("\nVerificando se o # de linhas é par ou impar para analisar a mediana:")
if len(trip_list_new) % 2 == 0:
	print("É par")
	median_trip = trip_list_new[int( (len(trip_list_new)-1)/2 )/2]+ trip_list_new[int( (len(trip_list_new)-1)/2 )]
else:
	print("É ímpar")
	median_trip = trip_list_new[int( (len(trip_list_new)-1)/2 )]

print("Valor da MEDIANA:", median_trip)

print("\nTAREFA 9: Imprimindo o mínimo, máximo, média, e mediana")
print("Min: ", min_trip, "Max: ", max_trip, "Média: ", mean_trip, "Mediana: ", median_trip)

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert round(min_trip) == 60, "TAREFA 9: min_trip com resultado errado!"
assert round(max_trip) == 86338, "TAREFA 9: max_trip com resultado errado!"
assert round(mean_trip) == 940, "TAREFA 9: mean_trip com resultado errado!"
assert round(median_trip) == 670, "TAREFA 9: median_trip com resultado errado!"
# -----------------------------------------------------

input("Aperte Enter para continuar...")
# TAREFA 10
# Gênero é fácil porque nós temos apenas algumas opções. E quanto a start_stations? Quantas opções ele tem?
# TODO: Verifique quantos tipos de start_stations nós temos, usando set()
user_types = set()
# set é um função built-in do Python. A set object is an unordered collection of distinct hashable objects. 
# Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference.

print("\n Printando as primeiras 20 start stations:", column_to_list(data_list, 3)[:20])

for station in column_to_list(data_list,3):
	if(station) not in (user_types):
		user_types.add(station)

print("\nTAREFA 10: Imprimindo as start stations:")
print("\nNumero de Start Stations:", len(user_types) ) 
print("Nomes das Start Stations:\n", user_types)

# ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
assert len(user_types) == 582, "TAREFA 10: Comprimento errado de start stations."
# -----------------------------------------------------

input("Aperte Enter para continuar...")
# TAREFA 11
# Volte e tenha certeza que você documenteou suas funções. Explique os parâmetros de entrada, a saída, e o que a função faz. Exemplo:
# def new_function(param1: int, param2: str) -> list:
#      """
#      Função de exemplo com anotações.
#      Argumentos:
#          param1: O primeiro parâmetro.
#          param2: O segundo parâmetro.
#      Retorna:
#          Uma lista de valores x.
#
#     """

input("Aperte Enter para continuar...")
# TAREFA 12 - Desafio! (Opcional)
# TODO: Crie uma função para contar tipos de usuários, sem definir os tipos
# para que nós possamos usar essa função com outra categoria de dados.
print("Você vai encarar o desafio? (yes ou no)")
answer = "no"

def count_items(column_list):
   item_types = []
   count_items = []
	
   return item_types, count_items


if answer == "yes":
    # ------------ NÃO MUDE NENHUM CÓDIGO AQUI ------------
    column_list = column_to_list(data_list, -2)
    types, counts = count_items(column_list)
    print("\nTAREFA 11: Imprimindo resultados para count_items()")
    print("Tipos:", types, "Counts:", counts)
    assert len(types) == 3, "TAREFA 11: Há 3 tipos de gênero!"
    assert sum(counts) == 1551505, "TAREFA 11: Resultado de retorno incorreto!"
    # -----------------------------------------------------
